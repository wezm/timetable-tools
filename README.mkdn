Timetable Tools
===============

This repo contains a set of tools that can extract and process structured
timetable data from the [timetable PDFs][timetables] that [V/Line][vline]
publishes.

[timetables]: http://www.vline.com.au/index_timetables.aspx
[vline]: http://www.vline.com.au/

Installation
------------

To run these tools you will need ruby 1.9+ and [bundler][bundler] installed.
bundler will ensure you have the necessary Ruby dependencies installed:

    bundle install

[bundler]: http://gembundler.com/

You will also need [pdf2html] to convert the PDFs to XML.

[pdf2html]: http://pdftohtml.sourceforge.net/

Usage
-----

### pdf2html

[pdf2html] is used to convert the timetable PDF into XML.

    pdftohtml -xml timetable.pdf timetable

### timetable

This tool can produce CSV files from a timetable XML file. Internally it builds
a histogram of the frequency that text appears at the co-ordinates of the text
in the XML file. The histogram is then used to group text by row and column,
which can then be used to produce the output CSV file.

    timetable timetable.xml

#### Sample Histograms

##### Rows

![Row Histogram](http://github.com/wezm/timetable-tools/raw/master/doc/bendigo-histogram-rows-table-1.png)

##### Columns

![Column Histogram](http://github.com/wezm/timetable-tools/raw/master/doc/bendigo-histogram-columns-table-1.png)

### timetable2db

This tool reads a CSV file produced by timetable, processes the data and stores
it into and SQLite database.

    timetable2db timetable-page*.csv timetable.sqlite

The resulting database contains the following tables:

         +---------------+      +----------+
         | line_stations |      | lines    |
         |---------------|      |----------|
         | id            |  +-->| id       |
         | line_id       |--+   | name     |
     +---| station_id    |      +----------+
     |   +---------------+
     |
     |
     |   +---------------+       +------------+      +----------+
     |   | stations      |       | stops      |      | services |
     |   |---------------|       |------------|      |----------|
     +-->| id            |<------| station_id |  +-->| id       |<------+
         | name          |       | service_id |--+   | number   |       |
         | latitude      |       | time       |      | inbound  |       |
         | longitude     |       +------------+      +----------+       |
         | address       |                                              |
         | city          |                           +--------------+   |
         | postcode      |                           | service_days |   |
         | phone         |                           |--------------|   |
         +---------------+                           | service_id   |---+
                                                     | day          |
                                                     +--------------+

Some notes:

* services.inbound is boolean (0 or 1) indicating if the service is heading into the city.
* service\_days.days is a number for the day of the week the service runs. Sunday is 1,
  Monday 2, etc.

#### Sample Query

Times of trains departing from Macedon towards the city on Monday:

    SELECT services.number, stops.time
    FROM service_days, services, stops, stations
    WHERE day = 2
    AND services.id = service_days.service_id
    AND services.inbound = 1
    AND stations.name = "Macedon"
    AND stops.station_id = stations.id
    AND stops.service_id = services.id;

Next train departing North Melbourne that stops at Macedon:

    SELECT *
    FROM stops AS departing, stops AS arriving, services, service_days
    WHERE departing.service_id = arriving.service_id
    AND departing.station_id = (SELECT id from stations where name = "North Melbourne")
    AND arriving.station_id = (SELECT id from stations where name = "Macedon")
    AND departing.service_id = services.id
    AND services.inbound = 0
    AND service_days.service_id = services.id
    AND service_days.day = strftime("%w", 'now', 'localtime') + 1
    AND time(departing.time) > time('now', 'localtime')
    ORDER BY time(departing.time)
    LIMIT 1;

Stops after the given stop for the given service:

    SELECT *
    FROM stops
    WHERE service_id = 74
    ORDER BY time;


