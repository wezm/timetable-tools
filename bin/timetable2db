#!/usr/bin/env ruby
# vi: set fileencoding=utf-8 :

require 'pathname'
require 'csv'
require 'optparse'

$LOAD_PATH.unshift Pathname(__FILE__).dirname.parent + 'lib'

require 'timetable/station_storer'
require 'timetable/day_parser'

options = {
  :city => "Melbourne",
  :line => "Bendigo"
}
output = '.'
OptionParser.new do |o|
  o.banner = "Usage: timetable2db [timetable.csv, ...] timetable.sqlite"

  o.separator ""
  o.separator "Loads CSV generated by `timetable` into an SQLite database"
  o.separator ""

  # o.on("-o", "--output DIR", "Output directory, default is pwd") do |outdir|
  #   output = outdir
  # end

  o.on_tail("-h", "--help", "Show this message") do
    puts o
    exit
  end
end.parse!

if ARGV.size < 2
  $stderr.puts "Usage: timetable2db timetable.csv timetable.sqlite"
  exit 2
end

def insert_station(row, storer)
  station = row[0].downcase.gsub(/[\(\)]/, '').gsub(/\b\w/) { $&.upcase } # Title Case
  storer.service_indexes.each do |idx|
    if row[idx] && row[idx] =~ /^(\d{2}:\d{2})(.?)$/
      time = Time.parse($1).strftime("%H:%M:%S")
      flag = $2
      storer.add_stop(station, :service => idx, :time => time)
    end
  end
end

storer = StationStorer.new(ARGV.pop, options[:line])
storer.create_or_clear_tables!

ARGV.each do |csv_path|
  # Read and process the timetable data
  puts csv_path
  storer.reset!

  # HACK: Handle the fact that the second table doesn't have the
  # direction info.
  if csv_path.include? "table-2"
    state = :determine_days
  else
    state = :determine_direction
  end
  
  CSV.foreach(csv_path, :encoding => "utf-8") do |row|
    # Skip until service definitions
    case state
    when :determine_direction
      from_to = row.compact.find { |col| col.include? options[:city] }
      if from_to
        from, to = from_to.split(/\s*Â­\s*/)
        storer.direction = from == options[:city] ? 'out' : 'in'
        state = :determine_days
      end
    when :determine_days
      if Timetable::DayParser.match(row.compact.first)
        row.each_with_index do |cell, idx|
          unless cell.nil?
            days = Timetable::DayParser.parse(cell)
            storer.add_days idx, days
          end
        end
        state = :skip_to_services
      end
    when :skip_to_services
      if row[0] == "Service No."
        row.each_with_index do |service, idx|
          if service =~ /^\d+$/
            storer.add_service idx, service.to_i
          end
        end
        state = :read_stations
      end
    when :read_stations
      insert_station(row, storer) if row[0]
    else
      puts "Unknown state: #{state}"
      exit 1
    end
  end
end
